version: '3.8'

services:
  # API Gateway
  traefik:
    image: traefik:v3.0
    container_name: aima-gateway
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - aima-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: aima-postgres
    environment:
      POSTGRES_DB: aima
      POSTGRES_USER: aima_user
      POSTGRES_PASSWORD: aima_password
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/config/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - aima-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aima_user -d aima"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: aima-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: aima_user
      MONGO_INITDB_ROOT_PASSWORD: aima_password
      MONGO_INITDB_DATABASE: aima
    volumes:
      - mongodb_data:/data/db
      - ./database/config/mongod.conf:/etc/mongod.conf
      - ./mongo-secrets/mongo-keyfile:/etc/mongo-keyfile
    ports:
      - "27017:27017"
    networks:
      - aima-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: aima-redis
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./database/config/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - aima-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "aima_password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: aima-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: aima_user
      MINIO_ROOT_PASSWORD: aima_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - aima-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: aima-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: aima_user
      RABBITMQ_DEFAULT_PASS: aima_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    networks:
      - aima-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aima-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - aima-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: aima-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: aima_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - aima-network

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: aima-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://aima_user:aima_password@postgres:5432/aima?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - aima-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: aima-redis-exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "aima_password"
    ports:
      - "9121:9121"
    networks:
      - aima-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # MongoDB Exporter for Prometheus
  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: aima-mongodb-exporter
    environment:
      MONGODB_URI: "mongodb://aima_user:aima_password@mongodb:27017/admin"
    ports:
      - "9216:9216"
    networks:
      - aima-network
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped

  # PostgreSQL Backup Service
  postgres-backup:
    image: postgres:15
    container_name: aima-postgres-backup
    environment:
      POSTGRES_PASSWORD: aima_password
      PGPASSWORD: aima_password
    volumes:
      - ./backups/postgres:/backups/postgres
      - ./database/backup-scripts:/scripts
    networks:
      - aima-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "
        chmod +x /scripts/postgres-backup.sh &&
        while true; do
          /scripts/postgres-backup.sh
          echo 'Next backup in 24 hours...'
          sleep 86400
        done
      "
    restart: unless-stopped

  # User Management Service
  user-management:
    build:
      context: ./services/user-management
      dockerfile: Dockerfile
    container_name: aima-user-management
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://aima_user:aima_password@postgres:5432/aima
      - REDIS_URL=redis://:aima_password@redis:6379/0
      - RABBITMQ_URL=amqp://aima_user:aima_password@rabbitmq:5672/
      - SECRET_KEY=your-secret-key-change-in-production
      - JWT_SECRET_KEY=your-jwt-secret-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    volumes:
      - ./services/user-management/logs:/app/logs
    networks:
      - aima-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-management.rule=PathPrefix(`/api/v1/users`)"
      - "traefik.http.services.user-management.loadbalancer.server.port=8000"

  # Configuration Management Service
  configuration-management:
    build:
      context: ./services/configuration-management
      dockerfile: Dockerfile
    container_name: aima-configuration-management
    ports:
      - "8002:8002"
    environment:
      - APP_NAME=AIMA Configuration Management
      - APP_VERSION=1.0.0
      - ENVIRONMENT=development
      - HOST=0.0.0.0
      - PORT=8002
      - DATABASE_URL=postgresql://aima_user:aima_password@postgres:5432/aima
      - REDIS_URL=redis://:aima_password@redis:6379/1
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - USER_MANAGEMENT_URL=http://user-management:8000
      - LOG_LEVEL=INFO
      - CONFIG_CACHE_TTL=3600
      - CONFIG_ENABLE_VERSIONING=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-management:
        condition: service_started
    volumes:
      - ./services/configuration-management/logs:/app/logs
    networks:
      - aima-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.configuration-management.rule=PathPrefix(`/api/v1/config`)"
      - "traefik.http.services.configuration-management.loadbalancer.server.port=8002"

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  minio_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  aima-network:
    driver: bridge